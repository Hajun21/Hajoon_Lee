#  자료형
#  프로그래밍 할 때 쓰이는 숫자, 문자열 등 자료형태로 사용하는 모든 것
#  type 함수로 자료형을 볼 수 있다
# ex) type
# print(type(1))          # 정수형(int)
# print(type(1.0))        # 실수형(float)
# print(type('Hello'))    # 문자열(str)
# print(type(True))       # 논리형(bool)

# a = 100
# print(type(a))

# # 정수형
# print(int(1.9))
# print(int(True))  # 1은 참
# print(int(False)) # 0은 거짓

# b = '100'         # 문자열
# c = 100           # 정수
# print(type(b))
# print(type(c))
#
# d = int(b)        # b변수의 값을 정수형으로 변환하여 d변수에 담아라
# print(type(d))
# print(d)
#
# n = 95          # 10진수 정수
# print(bin(n))   # 2진수(0,1)
# print(oct(n))   # 8진수(0~7)
# print(hex(n))   # 16진수(0~9,A~F) 0x / a~f -> 10~15

# 실수형
# print(float(1))    # 1을 실수로 바꾸겠다.
# print(float(True))
# print(float(False))
# print(float('3.14'))
# print(float('100'))
# print()

# 논리형
# print(bool(0))
# print(bool(1))
# print(bool(2))    # 0을 제외한 나머지 수는 모두 참
# print(bool(''))   # 비어있는 값은 거짓
# print(bool([]))
# print()

# 문자열
# print(str(100))
# print(str(True))
# print(str(False))
# print(str(3.14))

# print('Hello, python!')   # 작은 따옴표
# print("Hello, python!")   # 큰 따옴표

# print('''
# Life is too short,
# you need pytyon.
# ''')                     # 여러 줄 출력할 때는 따옴표 3개를 시작과 끝에 넣는다
#
# print("It's me.")                             # '를 표현할 때
# print('"파이썬 아주 쉽네."라고 그가 말했다.')   # 인용문 넣을 때
#
# 문자열 인덱싱
# 
# [0] : 문자열의 처음
# [-1] : 문자열의 마지막

# ex)
# print('안녕하세요'[0])
# print('안녕하세요'[1])
# print('안녕하세요'[2])
# print('안녕하세요'[3])
# print('안녕하세요'[4])
# print()
#
# print('안녕하세요'[-1])
# print('안녕하세요'[-2])
# print('안녕하세요'[-3])
# print('안녕하세요'[-4])
# print('안녕하세요'[-5])
# print()

# a = 'My python'
# print(a[0])
# print(a[2])          # 인덱싱에 포함(공백도 글자다!)
# print(a[3])
# print(a[-1])

# 문자열 슬라이싱
# 
# 문자열의 구간을 표시
# 예를 들어 a라는 변수가 있다면
# a[시작번호:끝번호+1]
# [:] --> 처음부터 끝까지, 모두를 의미

# 컬렉션 자료형
# 리스트
# a = []                        # 빈 리스트
# b = [1, 2, 3]                 # 정수로만 이루어진 리스트
# c = ['a', 'b', 'c', 'd']      # 문자열로 이루어진 리스트
# d = [1, 2, 'a', 'b', True]    # 여러 자료형으로 이루어진 리스트
# e = [1, 2, ['a', 'b']]        # 중첩 리스트
# print(a)
# print(b)
# print(c)
# print(d)
# print(e)

# 리스트 인덱싱
# print(b[1])
# print(c[3])
# print(d[0])
# print(e[2])         # ['a', 'b'] 가 하나 
# print(e[-1])        # 맨 마지막 요소(값)
# print(e[2][0])      # 중첩 리스트 안에 있는 값을 출력하고자 할 때
# print(e[2][1])

# f = [1, 2, ['a', 'b', ['안녕', '하세요']]]
# print(f)
# print(f[2])
# print(f[2][2])
# print(f[2][2][0])
# print()

# 리스트 슬라이싱
# a = [1, 2, 3, 4, 5]
# print(a[0:2])
# print(a[2:3])
# print(a[:3])    # 처음부터 (0 생략 가능)
# print(a[2:])    # 끝까지 (끝번호 생략 가능)
# print()

# b = [1, 2, 3, ['b', 'c', 'd'], 4, 5]
# print(b[2:5])
# print(b[3][:2])

# 리스트 연산자
# list_a = [1, 2, 3]
# list_b = [4, 5, 6]

# print('list_a :', list_a)
# print('list_b :', list_b)

# list_c = list_a + list_b    # 하나의 리스트로 합쳐진다(연결된다/이어진다)
# print('list_c :', list_c)

# list_d = list_a * 3         # 3번 반복(곱하기만큼 반복)
# print('list_d :', list_d)

# # 문제1) 출력결과를 참고하여 문자열 인덱싱으로 한 글자씩 출력해보자.
# # string = 'PYTHON'
# # [출력결과]
# # P
# # Y
# # N
# # H
# string = 'PYTHON'
# print(string[0])
# print(string[1])
# print(string[-1])
# print(string[3])

# # 문제2) 문자열 슬라이싱으로 출력결과와 같도록 출력해보자
# # mystr = 'GOOD NIGHT'
# # [출력결과]
# # OO
# #  NIGHT
# # OD
# # GH
# mystr = 'GOOD NIGHT'
# print(mystr[1:3])
# print(mystr[4:])
# print(mystr[2:4])
# print(mystr[7:9])
