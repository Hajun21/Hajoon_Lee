03 실수의 처리방식
소수점 이하 수(가수부)를 포함하는 수
실수의 가수부에 대한 범위는 무한대에 가깝기 때문에
컴퓨터의 메모리 공간에 소수점 이하의 수 범위를 다 담아내지 못한다.
따라서 소수점이 00 자리까지만 유효범위로 정하여 실수값을 저장하기 때문에
실수값은 오차가 발생할 수 밖에 없다.

실수값의 소수점의 위치를 지정하는 방식은
고정소수점 방식과 부동소수점 방식이 있다

고정 소수점 : 소수점의 위치가 미리 고정
부동 소수점 : 삽입되는 데이터값에 따라 소수점위치가 변경

05 자료형 & 변수

자료형 : Data 저장을 위해 미리 예약된 예약어
정수 자료형 ------------
int : 4byte 정수  1비트 -> 4byte          // 8 x 4 = 32		 실제 비트 수 31
char : 1byte
short : 2byte
long long : 8byte

실수 자료형 -------------
double : 8byte
float : 4byte

#include <stdio.h>
int main()
{
	int n1;						// 변수 선언 : 4byte 정수공간형성 n1 이름 부여

	n1 = 10;					 // 변수 공간에 값 대입
								// =(대입연산자) 공간 = 값 (먼저 처리)
								// 10이라는 Data 값을 먼저 저장한 뒤
								// n1 공간에 복사(대입) 변수는 하나의 숫자만 가능
	printf("%d\n", n1);		// 변수 서식문자에 맞게 출력
								// n1 안의 값을 %d에 맞게 출력

	int n2 = 20;				//변수 초기화
								// 20의 값을 상수 pool에 저장한 이후
								// 4byte 정수공간형성 후 n2 이름을 붙이고 초기화

	printf("%d\n", n1 + n2);		// n1의 값 + 2
//}

 05 정수 자료형

#include <stdio.h>

{
	char n1 = 10;    // 자료형 불일치 : char 타입은 문자를 받기위해 존재한다.
	short n2 = 20;	// 자료형 불일치 : short 타입도 문자를 받기위해 존재한다.
	int n3 = 30;		// 자료형 일치
}

 06 실수 자료형

#include <stdio.h>
int main ()
{
	float var1 = 0.33333333333F;
	double var2 = 0.333333333333333;

	printf("%.20f\n", var1);			// .20f : 20번 자리까지 출력해라
	printf("%.20f\n", var2);
}

 07 단일 문자 자료형

 단일 문자 저장을 위해서 약속된 코드표를 참고하여
 해당 코드표에 지정된 비트열로 저장시킨다.
 C언어는 ASCII 코드표를 이용한다.
 문자 or 숫자 든간에 전부 비트열로 저장된다.

#include <stdio.h>
int main()
{
	char ch1 = 'a';
	char ch2 = 97;
	char ch3 = 0b1100001;				// 2진법
	char ch4 = '!';
	
	printf("ch1 = "%c\n", ch1);		//  %c : 문자를 받는다.
	printf("ch2 = "%c\n", ch2);
	printf("ch3 = "%c\n", ch3);
	printf("ch4 = "%c\n", ch4);
}

 08 문자열 저장(배열)

 단일문자 : 'a'
 문자열 : "hello" ->	h e l l o 0	(6byte 필요 : null 문자)
 중요!! : 문자열은 마지막에 NULL문자 (\0)를 반드시 포함
 배열 : 같은 자료형으로 연속적인 공간 형성
 char arr [3] -> char 크기를 요소로 3칸짜리 공간을 형성
