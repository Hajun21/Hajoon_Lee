# 리스트 요소(값) 추가 : append(많이 사용함), insert

# list1 = [1, 2, 3]

# print("list1 : ", list1)

# list1. append(4) # 맨 뒤에 4를 삽입   / . <- ~의 ~안에(.이란)  메서드

# print("list1 : ", list1)

# list1. append(100)

# print("list1 : ", list1)

# list1. insert(1, 50)        # 1번 인덱스 자리에 50을 삽입(1 뒤로 50을 삽입)

# print("list1 : ", list1)

# 리스트의 요소(값) 제거 - 인덱스 번호로 삭제 : pop, del(다른 곳에서도 쓰임)

# list2 = [0, 1, 2, 3, 4, 5]# print("list2 : ", list2)

# del list2[1]            # 1번 인덱스 자료(값) 삭제/ [] - 대괄호

# print("list2 : ", list2)

# list2.pop(1)            # 리스트 안에서 존재하는 함수(함수들은 (괄호) ) list.pop

# print("list2 : ", list2)        # 숫자 1을 없애는게 아님 0123 순서로 삭제

# list2.pop()             # 빈칸 -> 맨 마지막 자료를 삭제

# print("list2 : ", list2)

# 튜플 - 읽기 전용 리스트   - 괄호 ()

# t1 = (1, 2, 3)

# print("튜플 t1 :", t1)

# t2 = 1, 2, 3            # 튜플은 () 없어도 가능

# print("튜플 t2 :", t2)

# t3 = tuple([100, 3.14, "Hello"])        # 이런 방법도 가능 tuple( [ ] )

# print("튜플 t3 :", t3)

# print(type(t3))

# t4 = (100)                             # 튜플이 아님! 변수로 인식

# print("변수 t4 :", t4)                 # 튜플은 혼자 X

# print(type(t4))

# print()## t5 = (100,)                     # 튜플로 인식하게 하려면 ,(콤마) 넣기

# print("튜플 t5 :", t5)

# print(type(t5))

# 리스트와 튜플의 차이점

#     리스트 [], 튜플은 ()

#     리스트는 그 값의 추가, 수정, 삭제 가능

#     튜플은 그 값을 바꿀 수 없다.

# 리스트와 튜플의 공통점

# 연산가능(덧셈, 곱셈(반복))

# 인덱싱, 슬라이싱 가능(시퀀스 자료형이라서 가능 - 순서가 있다.)

# 세트(집합)  {}

# 중복된 값의 저장이 불가능(중복제거용으로 사용)

# 수학의 집합 개념(교집합, 합집합, 차집합)

# 순서가 없기 때문에 인덱싱, 슬라이싱 불가능

# s1 = {1, 2, 3}# print("세트 s1 :", s1)

# 값 1개 추가하기 - add

# s1.add(9)      # 무조건 맨 뒤에 추가(순서가 없기 때문에)

# print("세트 s1 :", s1)

# 값 여러개 추가하기 - update

# s1.update([5,8,7,12])

# print("세트 s1 :", s1)

# 특정 값을 제거하기 - remove

# s1.remove(3)            # 값 3을 지워라

# print("세트 s1 :", s1)

# 딕셔너리(사전) - dict = {키1 : 값1, 키2 : 값2}   /   { : }

# 키와 값을 단어와 단어의 의미처럼 사용

# 인덱스가 존재 X, 키를 인덱스처럼 사용

# dic = {"name": "홍길동", "birthday": "1212"}

# print("딕셔너리 dic :", dic)

# 특정 값을 출력할 때

# print(dic["name"])      # 홍길동이 출력

# a = dic["birthday"]     # 1212가 변수 a에 담긴다.

# 딕셔너리 값을 수정할 때

# dic['name'] = '라이언'

# print("딕셔너리 dic :", dic)

# 딕셔너리 쌍을 추가할 때     # 해당하는 키가 없으면 추가됨 / 수정과 양식 같음

# dic['address'] = '대구'

# print("딕셔너리 dic :", dic)

# 딕셔너리 쌍을 삭제할 때 - del

# address에 해당하는 키와 값을 삭제

# del dic['address']

# print("딕셔너리 dic :", dic)

# key 리스트 만들기 - keys

# print(dic.keys())       # 키 부분만 따로 모은 것

# a = list(dic.keys())

# # 값(value) 리스트 만들기 - values

# print(dic.values())     # 값 부분만 따로 모은 것

# b = list(dic.values())

# print(b)

# items 함수를 이용해서 쌍을 얻기

# print(dic.items())      # 쌍이 튜플형식으로 묶인다.

# 키와 값을 모두 지우기

# dic.clear()# print("딕셔너리 dic :", dic)

# 섹션 3: 기본 입출력
# 표준 출력
# 이스케이프 문자
# 프로그래밍 할 때 사용할 수 있도록 미리 정의해둔 문자 조합 출력물을
# 보기 좋게 보는 용도로 사용 
# 대표적인 것 --> \n (엔터)줄바꿈

# print('Hello\'world\'')
# print("Hello'world'")

# print('Hello\"world\"')
# print('Hello"world"')

# print('*\n**\n***')
# print('Hello \nworld')

# sep - 공백 / sep = ',' 콤마가 들어감 사이에 넣기
# end - 줄 바꿈 ex) end= ':' 엔터안함

# print('재미있는','파이썬')
# print('Python', 'Java','C', sep=',')
# print('영화 타이타닉')
# print('평점', end=':')
# print('5점')

# fos = open('sample.py', mode= 'wt')     # 파일 열기

# print('print("Hello World")', file=fos) # 파일에 출력

# fos.close()                             # 파일 닫기

# 문제1) 날짜와 시간이 출력되게 만들기

# [출력결과]
# 2020/10/30 11:43:59
# 힌트 --> print 함수의 sep, end 사용

# print(2020, 10, 31 , sep='/', end=' ')
# print(11, 43, 59, sep=':')

# 문제2) 과일 이름을 요소로 하는 값이 3개인 리스트 a를 생성해라. (과일 이름 3개)
a = ['사과', '복숭아', '포도']
print(a)

# 문제3) 음식 이름을 요소로 하는 값이 3개인 리스트 b를 생성해라. (음식 이름 3개)
b = ['김치', '불고기', '비빔밥']
print(b)

# 문제4) 위 두 개의 리스트를 하나로 합친 리스트 c를 생성해라.
c= a + b
print(c)

# 문제5) c에서 마지막 과일을 다른 과일로 대체해라.
c[2]= '바나나'
print(c)   

# 형식을 갖춘 문자열# % 연산자, format() 메소드를 이용해 원하는 형식의 문자열을 만드는 것 / f-strings`
